// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MauiApp1.Model;
//
//    var student = Student.FromJson(jsonString);

namespace MauiApp1.Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Student
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("password")]
        public string Password { get; set; }

        [JsonProperty("profile")]
        public Profile Profile { get; set; }

        [JsonProperty("current_term")]
        public Term CurrentTerm { get; set; }

        [JsonProperty("previous_terms")]
        public List<Term> PreviousTerms { get; set; }
    }

    public partial class Term
    {
        [JsonProperty("term")]
        public string TermTerm { get; set; }

        [JsonProperty("enrolled_courses")]
        public List<string> EnrolledCourses { get; set; }
    }

    public partial class Profile
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("major")]
        public string Major { get; set; }

        [JsonProperty("faculty")]
        public string Faculty { get; set; }

        [JsonProperty("year")]
        public long Year { get; set; }
    }

    public partial class Student
    {
        public static List<Student> FromJson(string json) => JsonConvert.DeserializeObject<List<Student>>(json, MauiApp1.Model.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Student> self) => JsonConvert.SerializeObject(self, MauiApp1.Model.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
